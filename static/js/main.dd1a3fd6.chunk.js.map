{"version":3,"sources":["common/input.jsx","common/form.jsx","common/footer.jsx","componets/login.jsx","componets/test.jsx","componets/verify.jsx","componets/password.jsx","common/footerlogin.jsx","componets/Register.jsx","App.js","serviceWorker.js","index.js"],"names":["Input","name","onChange","label","value","error","type","className","htmlFor","id","Form","state","data","errors","validate","result","Joi","schema","abortEarly","console","log","details","item","path","message","validateProperty","obj","hanleSubmit","e","preventDefault","setState","doSubmit","handleChanged","input","currentTarget","errorMessage","handleRedirec","doRedirect","renderButton","disabled","renderLinkButton","onClick","renderInput","Component","Footer","to","Login","username","string","required","props","history","push","onSubmit","this","Verify","match","params","user","toast","info","setTimeout","trim","replace","bind","Password","password","success","FooterLogin","RegisterForm","firstname","lastname","reusername","repassword","App","Fragment","render","component","from","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.dd1a3fd6.chunk.js","sourcesContent":["import React from 'react';\r\nconst Input = ({ name, onChange, label, value, error, type }) => {\r\n  return (\r\n    <div className=\"form-group\">\r\n      <label htmlFor={name}>{label}</label>\r\n      <input\r\n        value={value}\r\n        name={name}\r\n        onChange={onChange}\r\n        id={name}\r\n        type={type}\r\n        className=\"form-control\"\r\n      />\r\n      {error && <div className=\"alert alert-danger\">{error}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import React, { Component } from 'react';\r\nimport Input from './input';\r\n\r\nimport Joi from 'joi-browser';\r\nclass Form extends Component {\r\n  state = {\r\n    data: {},\r\n    errors: {},\r\n  };\r\n\r\n  validate = () => {\r\n    const option = {\r\n      abortEarly: false,\r\n    };\r\n\r\n    const result = Joi.validate(this.state.data, this.schema, option);\r\n    console.log(result);\r\n    if (!result.error) return null;\r\n\r\n    const errors = {};\r\n    for (let item of result.error.details) errors[item.path[0]] = item.message;\r\n    return errors;\r\n\r\n    // const errors = {};\r\n    // const { data } = this.state;\r\n    // if (data.username.trim() == '')\r\n    //   errors.username = 'User Name is required';\r\n    // if (data.password.trim() == '') errors.password = 'Password is required';\r\n    // return Object.keys(errors).length == 0 ? null : errors;\r\n  };\r\n  validateProperty = ({ name, value }) => {\r\n    const obj = { [name]: value };\r\n    const schema = { [name]: this.schema[name] };\r\n    const { error } = Joi.validate(obj, schema);\r\n    return error ? error.details[0].message : null;\r\n  };\r\n\r\n  hanleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const errors = this.validate();\r\n    this.setState({ errors: errors || {} });\r\n    if (errors) return;\r\n    this.doSubmit();\r\n  };\r\n\r\n  handleChanged = ({ currentTarget: input }) => {\r\n    const errors = { ...this.state.errors };\r\n    const errorMessage = this.validateProperty(input);\r\n    if (errorMessage) errors[input.name] = errorMessage;\r\n    else delete errors[input.name];\r\n    const data = { ...this.state.data };\r\n    data[input.name] = input.value;\r\n    this.setState({ data, errors });\r\n  };\r\n  handleRedirec = (e) => {\r\n    e.preventDefault();\r\n    this.doRedirect();\r\n  };\r\n\r\n  renderButton = (label) => {\r\n    return (\r\n      <button disabled={this.validate()} className=\"btn btn-primary\">\r\n        {label}\r\n      </button>\r\n    );\r\n  };\r\n\r\n  renderLinkButton = (label) => {\r\n    return (\r\n      <button className=\"btn linkbutton \" onClick={this.handleRedirec}>\r\n        <i className=\"fa fa-chevron-left fa-2x\"></i>\r\n        <label className=\"buttonText\">{label}</label>\r\n      </button>\r\n    );\r\n  };\r\n\r\n  renderInput = (name, label, type = 'text') => {\r\n    const { data, errors } = this.state;\r\n    return (\r\n      <Input\r\n        name={name}\r\n        label={label}\r\n        value={data[name]}\r\n        onChange={this.handleChanged}\r\n        error={errors[name]}\r\n        type={type}\r\n      />\r\n    );\r\n  };\r\n}\r\n\r\nexport default Form;\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nconst Footer = () => {\r\n  return (\r\n    <div>\r\n      <div className=\"link-div divspecial\">\r\n        <p className=\"pline pspecial \">New to Autodesk?</p>\r\n        <Link className=\"plink\" to={'/register'}>\r\n          Create account\r\n        </Link>\r\n      </div>\r\n      <div className=\"link-div divspecial_end \">\r\n        <p className=\"pline\">Your account for everything</p>\r\n\r\n        <Link className=\"plink \" to={''}>\r\n          Learn more\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport Joi from 'joi-browser';\r\nimport Form from '../common/form';\r\n\r\nimport { Redirect, Route, Link } from 'react-router-dom';\r\nimport Footer from '../common/footer';\r\n\r\nclass Login extends Form {\r\n  state = {\r\n    data: { username: '' },\r\n    errors: {},\r\n  };\r\n\r\n  schema = {\r\n    username: Joi.string().required().label('User Name'),\r\n  };\r\n\r\n  doSubmit = () => {\r\n    const { data } = this.state;\r\n    this.props.history.push(`/verify/${data.username}`);\r\n    // try {\r\n    //   const { data } = this.state;\r\n    //   await auth.login(data.username, data.password);\r\n    //   const { state } = this.props.location;\r\n    //   window.location = state ? state.from.pathname : '/';\r\n    //   // this.props.history.push('/');\r\n    //   //4window.location = '/';\r\n    // } catch (ex) {\r\n    //   if (ex.response && ex.response.status === 400) {\r\n    //     const errors = { ...this.state.errors };\r\n    //     errors.username = ex.response.data;\r\n\r\n    //   }\r\n    // }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"row\">\r\n          <div className=\"col-xs-6 col-md-4\"></div>\r\n          <div className=\"col-xs-6 col-md-4 linkdivspecial\">\r\n            <p className=\"pheading\">Sign in</p>\r\n\r\n            <form onSubmit={this.hanleSubmit}>\r\n              {this.renderInput('username', ' User Name')}\r\n\r\n              {this.renderButton('Login')}\r\n            </form>\r\n            <Footer />\r\n          </div>\r\n          <div className=\"col-xs-6 col-md-4\"></div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n//\r\n","import React, { Component } from 'react';\r\nimport Login from './login';\r\n\r\nclass Test extends Component {\r\n  state = {};\r\n\r\n  handlevent = () => {};\r\n\r\n  lodding() {\r\n    return <Login />;\r\n  }\r\n  render() {\r\n    const { user } = this.props;\r\n    console.log(user);\r\n    return <button onClick={this.handlevent}>ADD</button>;\r\n  }\r\n}\r\n\r\nexport default Test;\r\n","import React from 'react';\r\nimport Joi from 'joi-browser';\r\nimport { toast } from 'react-toastify';\r\nimport Form from '../common/form';\r\nimport Footer from '../common/footer';\r\n\r\nclass Verify extends Form {\r\n  state = {\r\n    data: { username: this.props.match.params.name },\r\n    errors: {},\r\n  };\r\n\r\n  schema = {\r\n    username: Joi.string().required().label('User Name'),\r\n  };\r\n\r\n  doSubmit = () => {\r\n    const { data, errors } = this.state;\r\n    const { user } = this.props;\r\n    toast.info('verifying');\r\n    setTimeout(\r\n      function () {\r\n        if (data.username.trim() !== user.username.trim()) {\r\n          errors.username = 'The username is not recognized';\r\n          this.setState({ errors });\r\n        } else {\r\n          this.props.history.replace('/password');\r\n        }\r\n      }.bind(this),\r\n      5000\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"row\">\r\n          <div className=\"col-xs-6 col-md-4\"></div>\r\n          <div className=\"col-xs-6 col-md-4 linkdivspecial\">\r\n            <p className=\"pheading\">Sign in</p>\r\n            <form onSubmit={this.hanleSubmit}>\r\n              {this.renderInput('username', ' User Name')}\r\n\r\n              {this.renderButton('Verify')}\r\n            </form>\r\n            <Footer />\r\n          </div>\r\n          <div className=\"col-xs-6 col-md-4\"></div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Verify;\r\n//\r\n","import React from 'react';\r\nimport Joi from 'joi-browser';\r\nimport Form from '../common/form';\r\nimport { toast, ToastContainer } from 'react-toastify';\r\nimport { Redirect, Route } from 'react-router-dom';\r\nimport Footer from '../common/footer';\r\n\r\nclass Password extends Form {\r\n  state = {\r\n    data: { password: '' },\r\n    errors: {},\r\n  };\r\n\r\n  schema = {\r\n    password: Joi.string().required().label('Password'),\r\n  };\r\n\r\n  doSubmit = () => {\r\n    const { data, errors } = this.state;\r\n    const { user } = this.props;\r\n\r\n    if (data.password.trim() !== user.password.trim()) {\r\n      errors.password = 'The Password is Incorrect';\r\n      this.setState({ errors });\r\n    } else {\r\n      toast.success('Successfully login');\r\n      setTimeout(\r\n        function () {\r\n          this.props.history.replace('/');\r\n        }.bind(this),\r\n        5000\r\n      );\r\n    }\r\n  };\r\n  doRedirect = () => {\r\n    console.log('Redirect');\r\n    this.props.history.replace('/login');\r\n  };\r\n\r\n  render() {\r\n    const { user } = this.props;\r\n    return (\r\n      <div>\r\n        <div className=\"row\">\r\n          <div className=\"col-xs-6 col-md-4\"></div>\r\n          <div className=\"col-xs-6 col-md-4 linkdivspecial\">\r\n            {this.renderLinkButton('Welcome')}\r\n            <div className=\"link-div\">\r\n              <p className=\"pline\">{user.username}</p>\r\n            </div>\r\n            <form onSubmit={this.hanleSubmit}>\r\n              {this.renderInput('password', 'Password', 'password')}\r\n\r\n              {this.renderButton('Next')}\r\n            </form>\r\n            <Footer />\r\n          </div>\r\n          <div className=\"col-xs-6 col-md-4\"></div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Password;\r\n//\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nconst FooterLogin = () => {\r\n  return (\r\n    <div>\r\n      <div className=\"link-div divspecial\">\r\n        <p className=\"pline pspecial \">Already have an account?</p>\r\n        <Link className=\"plink\" to={'/'}>\r\n          Sign in\r\n        </Link>\r\n      </div>\r\n      <div className=\"link-div\">\r\n        <p className=\"pline\">Your account for everything</p>\r\n\r\n        <Link className=\"plink \" to={''}>\r\n          Learn more\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FooterLogin;\r\n","import React, { Component } from 'react';\r\nimport Joi, { errors } from 'joi-browser';\r\nimport Form from '../common/form';\r\nimport FooterLogin from '../common/footerlogin';\r\nimport { toast, ToastContainer } from 'react-toastify';\r\n\r\nclass RegisterForm extends Form {\r\n  state = {\r\n    data: {\r\n      firstname: '',\r\n      lastname: '',\r\n      username: '',\r\n      reusername: '',\r\n      password: '',\r\n      repassword: '',\r\n    },\r\n    errors: {},\r\n  };\r\n\r\n  schema = {\r\n    firstname: Joi.string()\r\n      .required()\r\n      .error((errors) => {\r\n        return {\r\n          message: 'Please enter your first name',\r\n        };\r\n      }),\r\n    lastname: Joi.string()\r\n      .required()\r\n      .error((errors) => {\r\n        return {\r\n          message: 'Please enter your last name',\r\n        };\r\n      }),\r\n    username: Joi.string()\r\n      .required()\r\n      .error((errors) => {\r\n        return {\r\n          message: 'Please enter your username',\r\n        };\r\n      }),\r\n    reusername: Joi.string()\r\n      .required()\r\n      .error((errors) => {\r\n        return {\r\n          message: 'Please re-enter your username',\r\n        };\r\n      }),\r\n    password: Joi.string()\r\n      .required()\r\n      .error((errors) => {\r\n        return {\r\n          message: 'Please enter your password',\r\n        };\r\n      }),\r\n    repassword: Joi.string()\r\n      .required()\r\n      .error((errors) => {\r\n        return {\r\n          message: 'Please re-enter your password',\r\n        };\r\n      }),\r\n  };\r\n\r\n  doSubmit = () => {\r\n    const { data, errors } = this.state;\r\n    //console.log('submitted');\r\n    if (data.username.trim() === data.reusername.trim()) {\r\n      if (data.password.trim() === data.repassword.trim()) {\r\n        toast.success('Account created successfully');\r\n        setTimeout(\r\n          function () {\r\n            this.props.history.replace('/');\r\n          }.bind(this),\r\n          5000\r\n        );\r\n      } else {\r\n        errors.repassword = 'please enter the same password';\r\n        this.setState({ errors });\r\n      }\r\n    } else {\r\n      errors.reusername = 'please enter the same username';\r\n      this.setState({ errors });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"row\">\r\n          <div className=\"col-xs-6 col-md-4\"></div>\r\n          <div className=\"col-xs-6 col-md-4 linkdivspecial\">\r\n            <p className=\"pheading\">Create account</p>\r\n\r\n            <form onSubmit={this.hanleSubmit}>\r\n              <div className=\"row rowspecial\">\r\n                <div className=\"col-8 col-sm-6\">\r\n                  {this.renderInput('firstname', ' First Name')}\r\n                </div>\r\n                <div className=\"col-4 col-sm-6\">\r\n                  {this.renderInput('lastname', ' Last Name')}\r\n                </div>\r\n              </div>\r\n\r\n              {this.renderInput('username', ' User Name')}\r\n              {this.renderInput('reusername', 'Re-type User Name')}\r\n              {this.renderInput('password', ' Password', 'password')}\r\n              {this.renderInput('repassword', 'Re-type Password', 'password')}\r\n\r\n              {this.renderButton('Login')}\r\n            </form>\r\n            <FooterLogin />\r\n          </div>\r\n          <div className=\"col-xs-6 col-md-4\"></div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RegisterForm;\r\n","import React, { Component } from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport './App.css';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Login from './componets/login';\nimport Test from './componets/test';\nimport Verify from './componets/verify';\nimport Password from './componets/password';\nimport RegisterForm from './componets/Register';\n\nclass App extends Component {\n  state = {\n    user: { username: 'johnsmith', password: 'john@123' },\n  };\n\n  render() {\n    const { user } = this.state;\n    return (\n      <React.Fragment>\n        <ToastContainer />\n        <Switch>\n          <Route\n            path=\"/verify/:name\"\n            render={(props) => <Verify {...props} user={user} />}\n          ></Route>\n          <Route\n            path=\"/password\"\n            render={(props) => <Password {...props} user={user} />}\n          ></Route>\n          <Route path=\"/register\" component={RegisterForm}></Route>\n          <Route\n            path=\"/login\"\n            render={(props) => <Login {...props} user={user} />}\n          ></Route>\n          <Redirect from=\"/\" to=\"/login\" />\n        </Switch>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'font-awesome/css/font-awesome.css';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}